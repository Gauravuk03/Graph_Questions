class Solution {
public:


 pair<int,int> BFS(unordered_map<int,vector<int>>&adj,int source){

    queue<int>q;
    q.push(source);

    unordered_map<int,bool>visited;

    visited[source]=true;

    int d=0;
    int fn=0;

    while(!q.empty()){

        int n=q.size();

        while(n--){

            int curr=q.front();
            q.pop();

            fn=curr;

            for(auto& nbr:adj[curr]){

                if(visited[nbr]==false){
                    visited[nbr]=true;
                    q.push(nbr);
                }
            }
        }
        if(!q.empty()){
            d++;
        }
    }
    return{fn,d};
 }
 int find(unordered_map<int,vector<int>>adj){

    //step-1 find the fartheset node form the random node

    auto[farthestNode,dist]=BFS(adj,0);

    //step-2 the fartheset node we get above is nothing but one end of the diameter of adj

    // step-3 find the fartheset from we got above, that will be  the other end of diameter

    auto[otherendNode,diameter]=BFS(adj,farthestNode);

    return diameter;
 }

  unordered_map<int,vector<int>>buildadj(vector<vector<int>>&edges){

    unordered_map<int,vector<int>>adj;

    for(auto& edge:edges){

        int u=edge[0];
        int v=edge[1];

        adj[u].push_back(v);
        adj[v].push_back(u);//undirected
    }

    return adj;

  }
    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {
        
        // making the two adjacency list

        unordered_map<int,vector<int>>adj1=buildadj(edges1);
        unordered_map<int,vector<int>>adj2=buildadj(edges2);


        int d1=find(adj1);
        int d2=find(adj2);

        int combined=(d1+1)/2 + (d2+1)/2 +1;

        return max({d1,d2,combined});
    }
};
